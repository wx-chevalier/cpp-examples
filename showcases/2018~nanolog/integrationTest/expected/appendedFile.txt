 Simple times
 More simplicity
 How about a number? 1900
 How about a second number? 1901
 How about three numbers without a space? 123
 How about a double? 0.110000
 How about a nice little string? Stephen Rocks!
 A middle "Stephen Rocks!" string?
 And another string? yolo swag! blah.
 One that should be "end"? end
 Hello world number 2 of 10 (0.20%)! This is Stephen!
 This is a string of many strings, like this one, this other one, and this third one with a number 12345670 and a final string with spacers              far out
 A const void* pointer 0x7ffe075cbe7d
 I'm a small log with a small string
 Let's try out all the types! Pointer = 0x7ffe075cbe7d! uint8_t = 10! uint16_t = 33! uint32_t = 99991! uint64_t = 18446744073709551615! float = 121.121002! double = 212.212000! hexadecimal = ff! Just a normal character = a
 how about some negative numbers? int8_t -10; int16_t -9991; int32_t -99991; int64_t -1; int -12356
 How about variable width + precision?  12345.12        123        end
 How about a variable length string that should end here
 And another one that should end here
 NonConst bcdefg and bcdefg
 A Character d
 10) NANO_LOG() "NANO_LOG("Hi ")"
 11) SDF
 12) NEWLinesSoEvil NANO_LOG()
 13) Yup
ieieieieieieie1
 13.5) This should be =2: 2
 14) Hello 5
 14) Hello 6
 15) This should not be incremented twice (=1):1
 15) This should be incremented once more (=2):2
 16) Hello /* uncool */
 17) This is rediculous
 18) OLO_SWAG
 11) SDF
 sneaky #define LOG
 Messages in the Header File
 No Hello
 I am so evil
 non-const fmt String
 NonConst: Lol
 {{"(( False curlies and brackets! 1
 Same line, bad form
 Really bad
 Ending on different lines
 Make sure that the inserted code is before the ++i
 The worse
 TEST
 14) Hello 5
 13) Yup
ieieieieieieie2
 Ending on different lines
 1) Simple times
 This string should end soon with 4 'a''s here: aaaa
 Another string that should end soon with 5 'a''s here: aaaaa
 A string that's just one 'a': a
 No Length=-1 -2 3 4 5 6 7.000000 8.000000 9.000000e+00 1.000000E+01 11 12 0x1.ap+3 0X1.CP+3 a abc 0x1
 hh=-1 -2 3 4 5 6
 h=-20000 -20001 20002 47043 4e24 4e25
 l=-1073741824 -1073741825 1073741826 10000000003 40000004 40000005 %lc %ls
 ll=1152921504606846976 -1152921504606846976 1152921504606846976 200000000000000000000 4000000000000000 8000000000000000
 j=1152921504606846976 -1152921504606846976 1152921504606846976 200000000000000000000 4000000000000000 8000000000000000
 z=4611686018427387904 2305843009213693952 1152921504606846976 200000000000000000000 4000000000000000 8000000000000000
 t=4611686018427387904 2305843009213693952 1152921504606846976 200000000000000000000 4000000000000000 8000000000000000
 L=7.000000 8.000000 9.000000e+00 1.000000E+01 11 12 0xdp+0 0XEP+0
 Loop test!
 Loop test!
 Loop test!
 Loop test!
 Loop test!
 Loop test!
 Loop test!
 Loop test!
 Loop test!
 Loop test!
 SimpleTest::logSomething: Something = 1
 SimpleTest::wholeBunchOfLogStatements: Here I am
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: exiting...
 In the header, I am 10
 In the header, I am 10 x2
 SimpleTest::logSomething: Something = 2
 SimpleTest::logSomething: Something = 3
 Debug
 Notice
 Warning
 Error
 Notice
 Warning
 Error
 Warning
 Error
 Error

# New execution started
 Simple times
 More simplicity
 How about a number? 1900
 How about a second number? 1901
 How about three numbers without a space? 123
 How about a double? 0.110000
 How about a nice little string? Stephen Rocks!
 A middle "Stephen Rocks!" string?
 And another string? yolo swag! blah.
 One that should be "end"? end
 Hello world number 2 of 10 (0.20%)! This is Stephen!
 This is a string of many strings, like this one, this other one, and this third one with a number 12345670 and a final string with spacers              far out
 A const void* pointer 0x7ffe075cbe7d
 I'm a small log with a small string
 Let's try out all the types! Pointer = 0x7ffe075cbe7d! uint8_t = 10! uint16_t = 33! uint32_t = 99991! uint64_t = 18446744073709551615! float = 121.121002! double = 212.212000! hexadecimal = ff! Just a normal character = a
 how about some negative numbers? int8_t -10; int16_t -9991; int32_t -99991; int64_t -1; int -12356
 How about variable width + precision?  12345.12        123        end
 How about a variable length string that should end here
 And another one that should end here
 NonConst bcdefg and bcdefg
 A Character d
 10) NANO_LOG() "NANO_LOG("Hi ")"
 11) SDF
 12) NEWLinesSoEvil NANO_LOG()
 13) Yup
ieieieieieieie1
 13.5) This should be =2: 2
 14) Hello 5
 14) Hello 6
 15) This should not be incremented twice (=1):1
 15) This should be incremented once more (=2):2
 16) Hello /* uncool */
 17) This is rediculous
 18) OLO_SWAG
 11) SDF
 sneaky #define LOG
 Messages in the Header File
 No Hello
 I am so evil
 non-const fmt String
 NonConst: Lol
 {{"(( False curlies and brackets! 1
 Same line, bad form
 Really bad
 Ending on different lines
 Make sure that the inserted code is before the ++i
 The worse
 TEST
 14) Hello 5
 13) Yup
ieieieieieieie2
 Ending on different lines
 1) Simple times
 This string should end soon with 4 'a''s here: aaaa
 Another string that should end soon with 5 'a''s here: aaaaa
 A string that's just one 'a': a
 No Length=-1 -2 3 4 5 6 7.000000 8.000000 9.000000e+00 1.000000E+01 11 12 0x1.ap+3 0X1.CP+3 a abc 0x1
 hh=-1 -2 3 4 5 6
 h=-20000 -20001 20002 47043 4e24 4e25
 l=-1073741824 -1073741825 1073741826 10000000003 40000004 40000005 %lc %ls
 ll=1152921504606846976 -1152921504606846976 1152921504606846976 200000000000000000000 4000000000000000 8000000000000000
 j=1152921504606846976 -1152921504606846976 1152921504606846976 200000000000000000000 4000000000000000 8000000000000000
 z=4611686018427387904 2305843009213693952 1152921504606846976 200000000000000000000 4000000000000000 8000000000000000
 t=4611686018427387904 2305843009213693952 1152921504606846976 200000000000000000000 4000000000000000 8000000000000000
 L=7.000000 8.000000 9.000000e+00 1.000000E+01 11 12 0xdp+0 0XEP+0
 Loop test!
 Loop test!
 Loop test!
 Loop test!
 Loop test!
 Loop test!
 Loop test!
 Loop test!
 Loop test!
 Loop test!
 SimpleTest::logSomething: Something = 1
 SimpleTest::wholeBunchOfLogStatements: Here I am
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: I am in a loop!
 SimpleTest::wholeBunchOfLogStatements: exiting...
 In the header, I am 10
 In the header, I am 10 x2
 SimpleTest::logSomething: Something = 2
 SimpleTest::logSomething: Something = 3
 Debug
 Notice
 Warning
 Error
 Notice
 Warning
 Error
 Warning
 Error
 Error


# Decompression Complete after printing 200 log messages
